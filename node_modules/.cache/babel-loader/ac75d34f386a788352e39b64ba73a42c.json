{"ast":null,"code":"var _jsxFileName = \"D:\\\\React2\\\\React Router\\\\Practice\\\\src\\\\components\\\\comments\\\\CommentsList.js\",\n    _s = $RefreshSig$();\n\nimport { useParams } from \"react-router-dom\";\nimport CommentItem from \"./CommentItem\";\nimport classes from \"./CommentsList.module.css\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst CommentsList = props => {\n  _s();\n\n  const params = useParams();\n  const targetComments = props.comments.filter(comment => {\n    return comment.quote === params.quoteId;\n  });\n  let content = targetComments.map(ele => {\n    return /*#__PURE__*/_jsxDEV(CommentItem, {\n      text: ele.text\n    }, ele.id, false, {\n      fileName: _jsxFileName,\n      lineNumber: 13,\n      columnNumber: 12\n    }, this);\n  });\n\n  if (!targetComments) {\n    content = /*#__PURE__*/_jsxDEV(\"p\", {\n      children: \"no comments were added yet for this quote\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 16,\n      columnNumber: 15\n    }, this);\n  }\n\n  return /*#__PURE__*/_jsxDEV(\"ul\", {\n    className: classes.comments,\n    children: content\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 19,\n    columnNumber: 10\n  }, this);\n};\n\n_s(CommentsList, \"+jVsTcECDRo3yq2d7EQxlN9Ixog=\", false, function () {\n  return [useParams];\n});\n\n_c = CommentsList;\nexport default CommentsList;\n\nvar _c;\n\n$RefreshReg$(_c, \"CommentsList\");","map":{"version":3,"names":["useParams","CommentItem","classes","CommentsList","props","params","targetComments","comments","filter","comment","quote","quoteId","content","map","ele","text","id"],"sources":["D:/React2/React Router/Practice/src/components/comments/CommentsList.js"],"sourcesContent":["import { useParams } from \"react-router-dom\";\nimport CommentItem from \"./CommentItem\";\nimport classes from \"./CommentsList.module.css\";\n\nconst CommentsList = (props) => {\n  const params = useParams();\n\n  const targetComments = props.comments.filter((comment) => {\n    return comment.quote === params.quoteId;\n  });\n\n  let content = targetComments.map((ele) => {\n    return <CommentItem key={ele.id} text={ele.text} />;\n  });\n  if (!targetComments) {\n    content = <p>no comments were added yet for this quote</p>;\n  }\n\n  return <ul className={classes.comments}>{content}</ul>;\n};\n\nexport default CommentsList;\n"],"mappings":";;;AAAA,SAASA,SAAT,QAA0B,kBAA1B;AACA,OAAOC,WAAP,MAAwB,eAAxB;AACA,OAAOC,OAAP,MAAoB,2BAApB;;;AAEA,MAAMC,YAAY,GAAIC,KAAD,IAAW;EAAA;;EAC9B,MAAMC,MAAM,GAAGL,SAAS,EAAxB;EAEA,MAAMM,cAAc,GAAGF,KAAK,CAACG,QAAN,CAAeC,MAAf,CAAuBC,OAAD,IAAa;IACxD,OAAOA,OAAO,CAACC,KAAR,KAAkBL,MAAM,CAACM,OAAhC;EACD,CAFsB,CAAvB;EAIA,IAAIC,OAAO,GAAGN,cAAc,CAACO,GAAf,CAAoBC,GAAD,IAAS;IACxC,oBAAO,QAAC,WAAD;MAA0B,IAAI,EAAEA,GAAG,CAACC;IAApC,GAAkBD,GAAG,CAACE,EAAtB;MAAA;MAAA;MAAA;IAAA,QAAP;EACD,CAFa,CAAd;;EAGA,IAAI,CAACV,cAAL,EAAqB;IACnBM,OAAO,gBAAG;MAAA;IAAA;MAAA;MAAA;MAAA;IAAA,QAAV;EACD;;EAED,oBAAO;IAAI,SAAS,EAAEV,OAAO,CAACK,QAAvB;IAAA,UAAkCK;EAAlC;IAAA;IAAA;IAAA;EAAA,QAAP;AACD,CAfD;;GAAMT,Y;UACWH,S;;;KADXG,Y;AAiBN,eAAeA,YAAf"},"metadata":{},"sourceType":"module"}